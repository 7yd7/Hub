local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- الاضافات

local GamePlaceId = game.PlaceId
local GameName = game:GetService("MarketplaceService"):GetProductInfo(GamePlaceId).Name
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local playerName = Players.LocalPlayer.name
local GameJobId = game.JobId
local AccountAge = player.AccountAge
local hasPremium = player.MembershipType == Enum.MembershipType.Premium

local Window = Fluent:CreateWindow({
    Title = "7yd7 | Hub | " .. GameName .. " | " .. playerName,
    SubTitle = "",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, 
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl 
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "info" }),
    Gameworks = Window:AddTab({ Title = GameName, Icon = "gamepad-2" }),
    Script = Window:AddTab({ Title = "Script", Icon = "scroll" }),
     game = Window:AddTab({ Title = "Game", Icon = "usb" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

do


local time = os.time()
local date = os.date("*t", time)

local hour = date.hour % 12
if hour == 0 then
    hour = 12
end

local min = string.format("%02d", date.min)
local sec = string.format("%02d", date.sec)

local ampm = date.hour >= 12 and "PM" or "AM"


-- معلومات عن سكربت

Tabs.Main:AddSection("info")

Tabs.Main:AddParagraph({
    Title = "Welcome " ..playerName.. " !"
})

Tabs.Main:AddParagraph({
    Title = "name game: " .. GameName
})

Tabs.Main:AddParagraph({
    Title = "id game: " .. GamePlaceId
})

Tabs.Main:AddParagraph({
    Title = "JobId game: " .. GameJobId
})

Tabs.Main:AddParagraph({
    Title = "Account Age: " .. AccountAge
})

Tabs.Main:AddParagraph({
    Title = "Player Premium: " .. (hasPremium and "yes" or "no")
})

Tabs.Main:AddParagraph({
    Title = "script run time: " .. date.day .. "/" .. date.month .. "/" .. date.year .. " " .. hour .. ":" .. min .. ":" .. sec .. " " .. ampm
})


Tabs.Main:AddParagraph({
    Title = "https://github.com/7yd7/Hub"
})

-- لعبه متاح

Tabs.Gameworks:AddSection("Auto")

local Slider = Tabs.Gameworks:AddSlider("Slider", {
    Title = "Speed Wait Eggs Roll",
    Description = "Speed Wait to Eggs Roll",
    Default = 0.3, 
    Min = 0,    
    Max = 10,  
    Rounding = 1, 
    Callback = function(Value)
        getgenv().SpeedEggs = Value
    end
})


local Toggle = Tabs.Gameworks:AddToggle("Eggs_RollsValue", {Title = "Auto Eggs Roll", Default = false})

Toggle:OnChanged(function()
    getgenv().Eggs_Roll = Options.Eggs_RollsValue.Value

    if getgenv().Eggs_Roll then
        startEggsRollLoop()
    else
        getgenv().Eggs_Roll = false
    end
end)

function startEggsRollLoop()
    spawn(function()
        while getgenv().Eggs_Roll do 
            wait(SpeedEggs)
            game:GetService("ReplicatedStorage").Network.Eggs_Roll:InvokeServer()
        end
    end)
end


local Slider = Tabs.Gameworks:AddSlider("Slider", {
    Title = "Process Upgrades Speed",
    Description = "Increase the speed of process refresh or update rate",    
    Default = 1, 
    Min = 0,    
    Max = 10,  
    Rounding = 1, 
    Callback = function(Value)
        getgenv().SpeedUpgrades = Value
    end
})

local Toggle = Tabs.Gameworks:AddToggle("UpgradesValue", {Title = "Auto Upgrades", Description = "Upgrades must also be open. If you want to specify Upgrades, just click on something and it will be done automatically.", Default = false})

Toggle:OnChanged(function()
    getgenv().Upgrades = Options.UpgradesValue.Value

    if getgenv().Upgrades then
        startUpgradesRollLoop()
    else
        getgenv().Upgrades = false
    end
end)

function startUpgradesRollLoop()
    spawn(function()
        while getgenv().Upgrades do
            local upgradesFolder = workspace:FindFirstChild("__THINGS") and workspace.__THINGS:FindFirstChild("Upgrades") and workspace.__THINGS.Upgrades:FindFirstChild("Upgrades Frontend Render")

            if upgradesFolder then
  

                local function convertShortenedNumber(shortened)
                    if string.find(shortened, "k") then
                        local number = string.gsub(shortened, "k", "")
                        return tonumber(number) * 1000
                    elseif string.find(shortened, "m") then
                        local number = string.gsub(shortened, "m", "")
                        return tonumber(number) * 1000000
                    elseif string.find(shortened, "b") then
                        local number = string.gsub(shortened, "b", "")
                        return tonumber(number) * 1000000000
                    else
                        return tonumber(shortened)
                    end
                end
                
                local lowestPrice = math.huge
                local lowestUpgradeName = nil
                
                for _, upgrade in pairs(upgradesFolder:GetChildren()) do
                    if upgrade:FindFirstChild("Price") and upgrade.Price:FindFirstChild("SurfaceGui") and upgrade.Price.SurfaceGui:FindFirstChild("Price") then
                        local priceLabel = upgrade.Price.SurfaceGui.Price
                        local priceText = convertShortenedNumber(priceLabel.ContentText)
                        
                        if priceText and priceText < lowestPrice then
                            lowestPrice = priceText
                            lowestUpgradeName = upgrade.Name
                        end
                    end
                end
                
                if lowestUpgradeName then
                    local args = {
                        [1] = lowestUpgradeName
                    }
                
                    game:GetService("ReplicatedStorage").Network.Upgrades_Purchase:InvokeServer(unpack(args))
                end
            end

            wait(SpeedUpgrades)
        end
    end)
end


local MultiDropdown = Tabs.Gameworks:AddDropdown("MultiDropdown", {
    Title = "Select Collectable Type",
    Description = "Choose to collect Orbs, Fruits, or both.",
    Values = {"Orb", "Fruit"},
    Multi = true,
    Default = {"Orb", "Fruit"}, 
})

MultiDropdown:SetValue({
    Orb = true,
    Fruit = true
})

local Toggle = Tabs.Gameworks:AddToggle("orbValue", {Title = "Auto Collect", Default = false})

Toggle:OnChanged(function()
    getgenv().orbValues = Options.orbValue.Value

    if getgenv().orbValues then
        startCollectingLoop()
    else
        getgenv().orbValues = false
    end
end)

function startCollectingLoop()
    spawn(function()
        while wait() do
            if getgenv().orbValues and MultiDropdown.Value["Orb"] then
                collectOrbs()
            end
            
            if getgenv().orbValues and MultiDropdown.Value["Fruit"] then
                collectFruits()
            end
        end
    end)
end

function collectOrbs()
    local orbsFolder = workspace.__THINGS.Orbs

    local orbNumbers = {}
    for _, orb in pairs(orbsFolder:GetChildren()) do
        table.insert(orbNumbers, orb.Name)
    end
    
    for _, orbNumber in pairs(orbNumbers) do
        local args = {
            [1] = {
                [1] = tonumber(orbNumber)
            }
        }
    
        game:GetService("ReplicatedStorage").Network:FindFirstChild("Orbs: Collect"):FireServer(unpack(args))
    
        local orbToRemove = orbsFolder:FindFirstChild(orbNumber)
        if orbToRemove then
            orbToRemove:Destroy()
        end
    end
end

function collectFruits()
    local breakablesFolder = workspace.__THINGS.Breakables
    
    for _, breakable in pairs(breakablesFolder:GetChildren()) do
        local base = breakable:FindFirstChild("base")
        
        if base then
            local hitbox = base:FindFirstChild("Hitbox")
            
            if hitbox then
                spawn(function()
                    firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, hitbox, 0)
                    firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, hitbox, 1)
                end)
            end
        end
    end
end

startCollectingLoop()

    Tabs.Gameworks:AddSection("Farm")

    local Slider = Tabs.Gameworks:AddSlider("Slider", {
        Title = "Speed Wait Auto Farm Orbs",
        Description = "Adjust the speed at which pets switch between targets during auto farming",
        Default = 0.3, 
        Min = 0,    
        Max = 10,  
        Rounding = 1, 
        Callback = function(Value)
            getgenv().SpeedAutoFarmOrbs = Value
        end
    })

    local Dropdown = Tabs.Gameworks:AddDropdown("FarmMode", {
        Title = "Farming Mode",
        Values = {"Random", "All Pets Target One"},
        Multi = false,
        Default = 1,
    })
    
    Dropdown:SetValue("Random")
    
    Dropdown:OnChanged(function(Value)
        getgenv().FarmMode = Value
    end)
    
    local Toggle = Tabs.Gameworks:AddToggle("AutoFarmorbs", {Title = "Auto Farm Orbs", Default = false})

    Toggle:OnChanged(function()
        getgenv().AutoFarmorb = Options.AutoFarmorbs.Value
    
        if getgenv().AutoFarmorb then
            startAutoFarmorbRollLoop()
        else
            getgenv().AutoFarmorb = false
        end
    end)
    
    function startAutoFarmorbRollLoop()
        spawn(function()
            while wait(SpeedAutoFarmOrbs) do
                if getgenv().AutoFarmorb then
                    local petsFolder = workspace.__THINGS.Pets
                    local breakablesFolder = workspace.__THINGS.Breakables
                    
                    local petNames = {}
                    for _, pet in pairs(petsFolder:GetChildren()) do
                        if tonumber(pet.Name) then  
                            table.insert(petNames, pet.Name)
                        end
                    end
                    
                    local breakableNumbers = {}
                    for _, breakable in pairs(breakablesFolder:GetChildren()) do
                        if breakable:FindFirstChild("base") == nil and tonumber(breakable.Name) then
                            table.insert(breakableNumbers, breakable.Name)
                        end
                    end
    
                    if #petNames == 0 or #breakableNumbers == 0 then
                        repeat
                            wait(1)
                            
                            petNames = {}
                            for _, pet in pairs(petsFolder:GetChildren()) do
                                if tonumber(pet.Name) then  
                                    table.insert(petNames, pet.Name)
                                end
                            end
                            
                            breakableNumbers = {}
                            for _, breakable in pairs(breakablesFolder:GetChildren()) do
                                if breakable:FindFirstChild("base") == nil and tonumber(breakable.Name) then
                                    table.insert(breakableNumbers, breakable.Name)
                                end
                            end
                        until #petNames > 0 and #breakableNumbers > 0
                    end
    
                    if getgenv().FarmMode == "Random" then
                        for _, petName in ipairs(petNames) do
                            local randomBreakableNumber = breakableNumbers[math.random(#breakableNumbers)]
                            local args = {
                                [1] = {
                                    [petName] = tonumber(randomBreakableNumber)
                                }
                            }
                            game:GetService("ReplicatedStorage").Network.Breakables_JoinPetBulk:FireServer(unpack(args))
                        end
                    elseif getgenv().FarmMode == "All Pets Target One" then
                        local targetBreakableNumber = breakableNumbers[math.random(#breakableNumbers)]
                        for _, petName in ipairs(petNames) do
                            local args = {
                                [1] = {
                                    [petName] = tonumber(targetBreakableNumber)
                                }
                            }
                            game:GetService("ReplicatedStorage").Network.Breakables_JoinPetBulk:FireServer(unpack(args))
                        end
                    end
                end
            end
        end)
    end

    local Toggle = Tabs.Gameworks:AddToggle("FlyingGiftsValue", {Title = "Auto Farm FlyingGifts", Description = "You must have slingshot skills.", Default = false})

Toggle:OnChanged(function()
    getgenv().FlyingGiftsl = Options.FlyingGiftsValue.Value

    if getgenv().FlyingGiftsl then
        startFlyingGiftsLoop()
    else
        getgenv().FlyingGiftsl = false
    end
end)

function startFlyingGiftsLoop()
    spawn(function()
        while getgenv().FlyingGiftsl do 
            wait(1)
            local player = game:GetService("Players").LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()  
            local rootPart = character:WaitForChild("HumanoidRootPart")
            
            local flyingGifts = workspace:WaitForChild("__THINGS"):WaitForChild("FlyingGifts")
            
            local function updateFlyingGiftsCFrame()
                for _, model in pairs(flyingGifts:GetChildren()) do
                    if model:FindFirstChild("Balloon") then
                        local newPosition = rootPart.Position + Vector3.new(0, 20, 0)
                        model.Balloon.CFrame = CFrame.new(newPosition)
                    end
                end
            end
            
            if #flyingGifts:GetChildren() > 0 then
                updateFlyingGiftsCFrame()
            end
        end
    end)
end

    
    

    Tabs.Gameworks:AddSection("Buy")


    Tabs.Gameworks:AddButton({
        Title = "Potion Vending Machine",
         Callback = function()
            local args = {
                [1] = "PotionVendingMachine"
            }
            
            game:GetService("ReplicatedStorage").Network.VendingMachines_Purchase:InvokeServer(unpack(args))            
        end
    })

    local Toggle = Tabs.Gameworks:AddToggle("PotionVendingMachineValue", {Title = "Auto Potion Vending Machine", Default = false})

Toggle:OnChanged(function()
    getgenv().AutoPotionVendingMachine = Options.PotionVendingMachineValue.Value

    if getgenv().AutoPotionVendingMachine then
        AutoPotionVendingMachineLoop()
    else
        getgenv().AutoPotionVendingMachine = false
    end
end)

function AutoPotionVendingMachineLoop()
    spawn(function()
        while getgenv().AutoPotionVendingMachine do 
            wait(3)
            local args = {
                [1] = "PotionVendingMachine"
            }
            
            game:GetService("ReplicatedStorage").Network.VendingMachines_Purchase:InvokeServer(unpack(args))     
        end
    end)
end


Tabs.Gameworks:AddParagraph({
    Title = "WARNING!",
    Content = "Please open the Potion Crafting GUI before using this feature. If the GUI is already open, press the refresh button to update the items. No need to restart the script."
})

getgenv().craftingItems = {}
getgenv().itemNumbers = {}

local function refreshCraftingItems()
    getgenv().craftingItems = {}
    getgenv().itemNumbers = {}

    local contentFrame = game:GetService("Players").LocalPlayer.PlayerGui._MACHINES.CraftingMachine.Frame.UsingFrame.Content

    for _, item in pairs(contentFrame:GetChildren()) do
        local itemNumber = tonumber(item.Name)
        if itemNumber then
            local itemName = item.TextLabel.Text
            getgenv().craftingItems[itemName] = itemNumber
            table.insert(getgenv().itemNumbers, itemNumber)
        end
    end

    table.sort(getgenv().itemNumbers)

    local sortedCraftingItems = {}
    for _, number in ipairs(getgenv().itemNumbers) do
        for itemName, itemNumber in pairs(getgenv().craftingItems) do
            if itemNumber == number then
                table.insert(sortedCraftingItems, itemName)
                break
            end
        end
    end

    return sortedCraftingItems
end

local sortedItems = refreshCraftingItems()

local Dropdown = Tabs.Gameworks:AddDropdown("CraftingItemDropdown", {
    Title = "Select Crafting Item",
    Description = "Select the crafting item you want to create.",
    Values = sortedItems, 
    Multi = false,
    Default = "Select",
})

Tabs.Gameworks:AddButton({
    Title = "Refresh Items",
    Callback = function()
        local newSortedItems = refreshCraftingItems()

        Dropdown:SetValues(newSortedItems)
    end
})

Tabs.Gameworks:AddButton({
    Title = "Potion Crafting",
    Callback = function()
        local selectedItem = Dropdown.Value 
        local selectedCode = getgenv().craftingItems[selectedItem]

        if selectedCode then
            local args = {
                [1] = "PotionCraftingMachine",
                [2] = selectedCode,
                [3] = 1
            }

            game:GetService("ReplicatedStorage").Network.CraftingMachine_Craft:InvokeServer(unpack(args))
        end
    end
})

local Toggle = Tabs.Gameworks:AddToggle("AutoPotionCraftingToggle", {Title = "Auto Potion Crafting", Default = false})

Toggle:OnChanged(function()
    getgenv().AutoPotionCrafting = Toggle.Value

    if getgenv().AutoPotionCrafting then
        startPotionCraftingMachineLoop()
    else
        getgenv().AutoPotionCrafting = false
    end
end)

function startPotionCraftingMachineLoop()
    spawn(function()
        while getgenv().AutoPotionCrafting do
            wait(0.5)

            local selectedItem = Dropdown.Value
            local selectedCode = getgenv().craftingItems[selectedItem]

            if selectedCode then
                local args = {
                    [1] = "PotionCraftingMachine",
                    [2] = selectedCode,
                    [3] = 1
                }

                game:GetService("ReplicatedStorage").Network.CraftingMachine_Craft:InvokeServer(unpack(args))
            end
        end
    end)
end


local indexShopPurchases = {
    { "AdvancedIndexMerchant", 1 },
    { "AdvancedIndexMerchant", 2 },
    { "AdvancedIndexMerchant", 3 },
    { "AdvancedIndexMerchant", 4 },
    { "AdvancedIndexMerchant", 5 },
    { "AdvancedIndexMerchant", 6 }
}

Tabs.Gameworks:AddButton({
    Title = "Buy All Index Shop Potions",
    Callback = function()
        for _, purchase in ipairs(indexShopPurchases) do
            local args = {
                [1] = purchase[1],
                [2] = purchase[2]
            }

            game:GetService("ReplicatedStorage").Network.Merchant_RequestPurchase:InvokeServer(unpack(args))
        end
    end
})

local Toggle = Tabs.Gameworks:AddToggle("AutoindexShopPurchasesValue", {Title = "Auto Buy All Index Shop Potions", Default = false})

Toggle:OnChanged(function()
    getgenv().AutoindexShopPurchases = Options.AutoindexShopPurchasesValue.Value

    if getgenv().AutoindexShopPurchases then
        AutoindexShopPurchasesLoop()
    else
        getgenv().AutoindexShopPurchases = false
    end
end)

function AutoindexShopPurchasesLoop()
    spawn(function()
        while getgenv().AutoindexShopPurchases do 
            wait(3)
            for _, purchase in ipairs(indexShopPurchases) do
                local args = {
                    [1] = purchase[1],
                    [2] = purchase[2]
                }
    
                game:GetService("ReplicatedStorage").Network.Merchant_RequestPurchase:InvokeServer(unpack(args))
            end
        end
    end)
end

local StandardMerchantShopPurchases = {
    { "StandardMerchant", 1 },
    { "StandardMerchant", 2 },
    { "StandardMerchant", 3 },
    { "StandardMerchant", 4 },
    { "StandardMerchant", 5 },
    { "StandardMerchant", 6 }
}

Tabs.Gameworks:AddButton({
    Title = "Buy All Merchant",
    Callback = function()
        for _, purchase in ipairs(StandardMerchantShopPurchases) do
            local args = {
                [1] = purchase[1],
                [2] = purchase[2]
            }

            game:GetService("ReplicatedStorage").Network.CustomMerchants_Purchase:InvokeServer(unpack(args))
        end
    end
})

local Toggle = Tabs.Gameworks:AddToggle("AutoMerchantValue", {Title = "Auto Buy Merchant", Default = false})

Toggle:OnChanged(function()
    getgenv().AutoMerchant = Options.AutoMerchantValue.Value

    if getgenv().AutoMerchant then
        AutoAutoMerchantLoop()
    else
        getgenv().AutoMerchant = false
    end
end)

function AutoAutoMerchantLoop()
    spawn(function()
        while getgenv().AutoMerchant do 
            wait(3)
            for _, purchase in ipairs(StandardMerchantShopPurchases) do
                local args = {
                    [1] = purchase[1],
                    [2] = purchase[2]
                }
    
                game:GetService("ReplicatedStorage").Network.CustomMerchants_Purchase:InvokeServer(unpack(args))
            end
        end
    end)
end


    Tabs.Gameworks:AddSection("Boosts")

    local fruits = {
        ["Fruit_Rainbow"] = "0176f62846ba492fa14ad6ebb44fb0f5",
        ["Fruit_Apple"] = "5d1bac4b437440e1be4a65d7d316647d", 
        ["Fruit_Banana"] = "620b1190c9894d44a285080967ab8935", 
        ["Fruit_Orange"] = "152aea2631de45dca7f00e2115fd8b3e", 
        ["Fruit_Pineapple"] = "b5812bbeddd5431d98ac7e2ba0bcd7e3", 
        ["Fruit_Watermelon"] = "e66b62370a5a4a65bfe59f4b444c7c18", 
    }
    
    local fruitsShiny = {
        ["Fruit_Rainbow"] = "9cfb9670c33a4aeaadf12d651874c602",
        ["Fruit_Apple"] = "f2621460a4744889a894a716c7297df1", 
        ["Fruit_Banana"] = "97838cf87db040b4b40f1ccdf9525876", 
        ["Fruit_Orange"] = "d36122a297e04c30bff3531157104180", 
        ["Fruit_Pineapple"] = "5684c801195c43c5b2a7c0bbbd1c11cd", 
        ["Fruit_Watermelon"] = "6b9cc8b67e2a4f7893f47f00b14b6418", 
    }
    
    local useShinyFruits = false
    
    local MultiDropdown = Tabs.Gameworks:AddDropdown("MultiFruitDropdown", {
        Title = "Select Fruits",
        Description = "You can select multiple fruits.",
        Values = {"Fruit_Rainbow", "Fruit_Apple", "Fruit_Banana", "Fruit_Orange", "Fruit_Pineapple", "Fruit_Watermelon"},
        Multi = true, 
        Default = {"Fruit_Rainbow"}, 
    })
    
    MultiDropdown:SetValue({
        Fruit_Rainbow = true,
        Fruit_Apple = false,
        Fruit_Banana = false,
        Fruit_Orange = false,
        Fruit_Pineapple = false,
        Fruit_Watermelon = false,
    })
    
    local Slider = Tabs.Gameworks:AddSlider("Slider", {
        Title = "Select Amount fruits",
        Description = "Choose the number of fruits to consume",
        Default = 1, 
        Min = 1,    
        Max = 30,  
        Rounding = 1, 
        Callback = function(Value)
            getgenv().fruitsnumber = math.floor(Value)
        end
    })
    
    function AutoFruitConsumptionLoop()
        spawn(function()
            while getgenv().AutoFruitConsumption do 
                wait(3) 
        
                local boostsFolder = game:GetService("Players").LocalPlayer.PlayerGui.Main.Boosts.Inner
        
                if not boostsFolder then
                    return
                end
        
                local selectedFruitsList = useShinyFruits and fruitsShiny or fruits
        
                for fruitName, state in next, MultiDropdown.Value do
                    if state then
                        local fruitCode = selectedFruitsList[fruitName]
                        if fruitCode then
                            if not boostsFolder:FindFirstChild(fruitName) then
                                local args = {
                                    [1] = fruitCode,
                                    [2] = getgenv().fruitsnumber 
                                }
                                game:GetService("ReplicatedStorage").Network:FindFirstChild("Fruits: Consume"):InvokeServer(unpack(args))
                            end
                        end
                    end
                end
            end
        end)
    end
    
    Tabs.Gameworks:AddButton({
        Title = "Consume Selected Fruits", 
        Callback = function()
            local selectedFruits = {}
            for fruitName, state in next, MultiDropdown.Value do
                if state then
                    table.insert(selectedFruits, fruitName)
                end
            end
        
            local amount = getgenv().fruitsnumber 
        
            local selectedFruitsList = useShinyFruits and fruitsShiny or fruits 
        
            for _, fruitName in ipairs(selectedFruits) do
                local fruitCode = selectedFruitsList[fruitName] 
                if fruitCode then
                    local args = {
                        [1] = fruitCode,
                        [2] = amount
                    }
                    game:GetService("ReplicatedStorage").Network:FindFirstChild("Fruits: Consume"):InvokeServer(unpack(args))
                end
            end
        end
    })
    
    local ToggleShiny = Tabs.Gameworks:AddToggle("UseShinyFruitsToggle", {Title = "Use Shiny Fruits", Default = false})
    
    ToggleShiny:OnChanged(function()
        useShinyFruits = ToggleShiny.Value
    end)
    
    local Toggle = Tabs.Gameworks:AddToggle("AutoFruitConsumptionToggle", {Title = "Auto Fruit Consumption", Default = false})
    
    Toggle:OnChanged(function()
        getgenv().AutoFruitConsumption = Toggle.Value
    
        if getgenv().AutoFruitConsumption then
            AutoFruitConsumptionLoop()
        else
            getgenv().AutoFruitConsumption = false
        end
    end)    


    Tabs.Gameworks:AddSection("Pets Equip")

local Input = Tabs.Gameworks:AddInput("code Pets", {
    Title = "Code Pets ",
    Default = "",
    Placeholder = "9d72f9495cde4cc5b64bd1cdc52ce50b",
    Numeric = false,
    Finished = false,
    Callback = function(Value)
        local extractedText = Value:match('"(.-)"') or Value
        getgenv().inputValue = extractedText
    end
})

local DropdownValues = {}
local Dropdown = Tabs.Gameworks:AddDropdown("Dropdown", {
    Title = "Pets Dropdown Equip",
    Values = DropdownValues,
    Multi = false,
    Default = nil,
})

Tabs.Gameworks:AddButton({
    Title = "Add to Dropdown",
    Callback = function()
        if getgenv().inputValue then
            local exists = false
            for _, value in ipairs(DropdownValues) do
                if value:match('^' .. getgenv().inputValue) then
                    exists = true
                    break
                end
            end
            
            if not exists then
                table.insert(DropdownValues, getgenv().inputValue)
                Dropdown:SetValues(DropdownValues)
                Fluent:Notify({
                    Title = "7yd7 | Warning",
                    Content = "Added value: " .. getgenv().inputValue,
                    Duration = 5
                })
            else
                Fluent:Notify({
                    Title = "7yd7 | Warning",
                    Content = "Value already exists in the Dropdown!",
                    Duration = 5
                })
            end
        else
            Fluent:Notify({
                Title = "7yd7 | Warning",
                Content = "No input text to add!",
                Duration = 5
            })
        end
    end
})


Tabs.Gameworks:AddButton({
    Title = "Remove Selected Value",
    Callback = function()
        local selectedValue = Dropdown.Value
        
        for index, value in ipairs(DropdownValues) do
            if value == selectedValue then
                table.remove(DropdownValues, index)
                Dropdown:SetValues(DropdownValues)
                Fluent:Notify({
                    Title = "7yd7 | Warning",
                    Content = "Removed value: " .. selectedValue,
                    Duration = 5
                })
                break
            end
        end
    end
})


local NumberInput = Tabs.Gameworks:AddInput("Double use", {
    Title = "Double use",
    Default = "",
    Placeholder = "Enter a number",
    Numeric = true, 
    Finished = false,
    Callback = function(Value)
        local number = tonumber(Value) 
        getgenv().numberValue = number
    end
})


Tabs.Gameworks:AddButton({
    Title = "Apply Number to Selected Pet",
    Callback = function()
        local selectedValue = Dropdown.Value
        local number = getgenv().numberValue
        
        if selectedValue and number then
            if number >= 2 then
 
                for index, value in ipairs(DropdownValues) do
                    local baseValue = value:match('^(.-),?%s?%d*$') or value 
                    if baseValue == selectedValue:match('^(.-),?%s?%d*$') then
                        DropdownValues[index] = baseValue .. ", " .. tostring(number)
                        Dropdown:SetValues(DropdownValues) 
                        Fluent:Notify({
                            Title = "7yd7 | Warning",
                            Content = "Updated value: " .. DropdownValues[index],
                            Duration = 5
                        })
                        break
                    end
                end
            elseif number == 1 then

                for index, value in ipairs(DropdownValues) do
                    local baseValue = value:match('^(.-),?%s?%d*$') or value 
                    if baseValue == selectedValue:match('^(.-),?%s?%d*$') then
                        DropdownValues[index] = baseValue 
                        Dropdown:SetValues(DropdownValues) 
                        Fluent:Notify({
                            Title = "7yd7 | Warning",
                            Content = "Removed number from value: ".. DropdownValues[index],
                            Duration = 5
                        })
                        break
                    end
                end
            else
                Fluent:Notify({
                    Title = "7yd7 | Warning",
                    Content = "Invalid number! Must be 1 or more.",
                    Duration = 5
                })
            end
        else
            Fluent:Notify({
                Title = "7yd7 | Warning",
                Content = "Please select a pet and enter a valid number!",
                Duration = 5
            })
        end
    end
})

Tabs.Gameworks:AddButton({
    Title = "Copy script",
    Description = "After you copy the script, put it in Autoexec and do rejoin.",
    Callback = function()
        if #DropdownValues == 0 then
            Fluent:Notify({
                Title = "7yd7 | Warning",
                Content = "No data to copy!",
                Duration = 5
            })
            return
        end

        local clipboardText = 'getgenv().petsToEquip = {\n'
        
        for _, value in ipairs(DropdownValues) do
            local baseValue, number = value:match('^(.-),%s?(%d+)$') 
            baseValue = baseValue or value 
            
            if number then
                clipboardText = clipboardText .. string.format('    "%s", %s,\n', baseValue, number)
            else
                clipboardText = clipboardText .. string.format('    "%s",\n', baseValue)
            end
        end
        
        clipboardText = clipboardText .. '}\n\nloadstring(game:HttpGet("https://raw.githubusercontent.com/7yd7/Hub/refs/heads/Branch/Autoexec/PETS-GO"))()'
        
        setclipboard(clipboardText)
    end
})


-- سكربت جميع مابات

		Tabs.Script:AddSection("player")


    local Slider = Tabs.Script:AddSlider("Slider", {
        Title = "WalkSpeed",
        Description = "Adjust the speed of a personal player",
        Default = 16,
        Min = 0,
        Max = 500,
        Rounding = 1,
        Callback = function(Value)
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
        end
    })

        Tabs.Script:AddButton({
        Title = "Reset WalkSpeed",
        Description = "Reset WalkSpeed normal",
        Callback = function()
            Window:Dialog({
                Title = "Reset WalkSpeed",
                Content = "Are you sure you want to reset the WalkSpeed?",
                Buttons = {
                    {
                        Title = "Confirm",
                        Callback = function()
                   game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
                        end
                    },
                    {
                        Title = "Cancel",
                        Callback = function()
                        end
                    }
                }
            })
        end
    })


    
    local Slider = Tabs.Script:AddSlider("Slider", {
        Title = "JumpPower",
        Description = "Adjust the JumpPower of a personal player",
        Default = 50,
        Min = 0,
        Max = 500,
        Rounding = 1,
        Callback = function(Value)
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
        end
    })

        Tabs.Script:AddButton({
        Title = "Reset JumpPower",
        Description = "Reset JumpPower normal",
        Callback = function()
            Window:Dialog({
                Title = "Reset JumpPower",
                Content = "Are you sure you want to reset the JumpPower?",
                Buttons = {
                    {
                        Title = "Confirm",
                        Callback = function()
                   game.Players.LocalPlayer.Character.Humanoid.JumpPower = 50
                        end
                    },
                    {
                        Title = "Cancel",
                        Callback = function()
                        end
                    }
                }
            })
        end
    })

    local Toggle = Tabs.Script:AddToggle("AntiAFKEnableds", {Title = "Anti AFK", Default = false})

    Toggle:OnChanged(function()
        getgenv().AntiAFKEnabled = Options.AntiAFKEnableds.Value
    
        if getgenv().AntiAFKEnabled then
            startAntiAFK()
        else
            getgenv().AntiAFKEnabled = false
        end
    end)
    
    function startAntiAFK()
        spawn(function()
            getgenv().antiAfkEnabled = true
    
            local VirtualUser = game:GetService("VirtualUser")
    
            game:GetService("Players").LocalPlayer.Idled:connect(function()
                while getgenv().antiAfkEnabled do
                    VirtualUser:CaptureController()
                    VirtualUser:ClickButton2(Vector2.new())
                    wait(60)
                end
            end)
        end)
    end    


    
    Tabs.Script:AddSection("Script")


    Tabs.Script:AddButton({
        Title = "Infinite Yield",
        Description = "",
        Callback = function()
            Window:Dialog({
                Title = "Infinite Yield",
                Content = "Are you sure you want to activate the script?",
                Buttons = {
                    {
                        Title = "Yes",
                        Callback = function()

                            loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
                                end
                    },
                    {
                        Title = "No",
                        Callback = function()
                        end
                    }
                }
            })
        end
    })

    Tabs.Script:AddButton({
        Title = "fates admin",
        Description = "",
        Callback = function()
            Window:Dialog({
                Title = "fates admin",
                Content = "Are you sure you want to activate the script?",
                Buttons = {
                    {
                        Title = "Yes",
                        Callback = function()

                            loadstring(game:HttpGet("https://raw.githubusercontent.com/fatesc/fates-admin/main/main.lua"))()
                                        end
                    },
                    {
                        Title = "No",
                        Callback = function()
                        end
                    }
                }
            })
        end
    })

    Tabs.Script:AddButton({
        Title = "Hydroxide",
        Description = "",
        Callback = function()
            Window:Dialog({
                Title = "Hydroxide",
                Content = "Are you sure you want to activate the script?",
                Buttons = {
                    {
                        Title = "Yes",
                        Callback = function()

 local owner = "Upbolt"
local branch = "revision"

local function webImport(file)
    return loadstring(game:HttpGetAsync(("https://raw.githubusercontent.com/%s/Hydroxide/%s/%s.lua"):format(owner, branch, file)), file .. '.lua')()
end

webImport("init")
webImport("ui/main")
                                        end
                    },
                    {
                        Title = "No",
                        Callback = function()
                        end
                    }
                }
            })
        end
    })

    Tabs.Script:AddButton({
        Title = "SimpleSpy",
        Description = "",
        Callback = function()
            Window:Dialog({
                Title = "SimpleSpy",
                Content = "Are you sure you want to activate the script?",
                Buttons = {
                    {
                        Title = "Yes",
                        Callback = function()

                            loadstring(game:HttpGet("https://github.com/exxtremestuffs/SimpleSpySource/raw/master/SimpleSpy.lua"))()
                                        end
                    },
                    {
                        Title = "No",
                        Callback = function()
                        end
                    }
                }
            })
        end
    })

    Tabs.Script:AddButton({
        Title = "Dex V4",
        Description = "",
        Callback = function()
            Window:Dialog({
                Title = "Dex V4",
                Content = "Are you sure you want to activate the script?",
                Buttons = {
                    {
                        Title = "Yes",
                        Callback = function()

                            loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/dex.lua"))()
                                        end
                    },
                    {
                        Title = "No",
                        Callback = function()
                        end
                    }
                }
            })
        end
    })

    Tabs.Script:AddButton({
        Title = "Dex V3",
        Description = "",
        Callback = function()
            Window:Dialog({
                Title = "Dex V3",
                Content = "Are you sure you want to activate the script?",
                Buttons = {
                    {
                        Title = "Yes",
                        Callback = function()

                            loadstring(game:HttpGet("https://raw.githubusercontent.com/Babyhamsta/RBLX_Scripts/main/Universal/BypassedDarkDexV3.lua", true))()
                                                end
                    },
                    {
                        Title = "No",
                        Callback = function()
                        end
                    }
                }
            })
        end
    })

-- سكربت لذي موجوده العاب


		Tabs.game:AddSection("Game Works Script")

        Tabs.game:AddParagraph({
            Title = "Important Warning",
            Content = "There are three different status levels for the map:\n🟢 Fully Functional (100%): The script operates perfectly within the map.\n🟠 Partially Functional (50%): The script has a 50% success rate; some commands may or may not work as intended.\n🔴 Non-Functional (0%): The script is not operational; commands are either not executed at all or have an extremely low chance of functioning correctly."
        })

        local api_url = "https://api.github.com/repos/7yd7/Hub/contents/Script?ref=Branch"

        local success, response = pcall(function()
            return request({
                Url = api_url,
                Method = "GET",
                Headers = {
                    ["Content-Type"] = "application/json"
                }
            })
        end)
        
        if success and response.StatusCode == 200 then
            local http = game:GetService("HttpService")
            local data = http:JSONDecode(response.Body)
        
            for _, file in pairs(data) do
                local fullName = file.name
                
                local mapName, mapId, status = fullName:match("^(.-)|(%d+)|(.+)$")
                
                if mapName and mapId and status then
                    mapId = tonumber(mapId) 
        
                    Tabs.game:AddButton({
                        Title = mapName .. " | " .. status,
                        Description = "Game Script",
                        Callback = function()
                            Window:Dialog({
                                Title = "Teleport",
                                Content = "Teleport to game " .. mapName,
                                Buttons = {
                                    {
                                        Title = "Confirm",
                                        Callback = function()
                                            game:GetService("TeleportService"):Teleport(mapId, game:GetService("Players").LocalPlayer)
                                        end
                                    },
                                    {
                                        Title = "Cancel",
                                        Callback = function() end
                                    }
                                }
                            })
                        end
                    })
                else
                    print("Invalid format for file: " .. fullName)
                end
            end
        else
            print("Error fetching data: " .. (response and response.StatusMessage or "Unknown error"))
        end
        

-- نهايه



SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)


SaveManager:IgnoreThemeSettings()

SaveManager:SetIgnoreIndexes({})

Window:SelectTab(1)


SaveManager:LoadAutoloadConfig()


InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

SaveManager:LoadAutoloadConfig()

    end
